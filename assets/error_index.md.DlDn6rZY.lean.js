import{_ as s,o as i,c as n,aT as e}from"./chunks/framework.DGJv6FeM.js";const c=JSON.parse('{"title":"错误记录与解决","description":"","frontmatter":{"title":"错误记录与解决"},"headers":[],"relativePath":"error/index.md","filePath":"error/index.md"}'),t={name:"error/index.md"};function l(p,a,h,r,d,k){return i(),n("div",null,a[0]||(a[0]=[e(`<h1 id="错误记录与解决" tabindex="-1">错误记录与解决 <a class="header-anchor" href="#错误记录与解决" aria-label="Permalink to &quot;错误记录与解决&quot;">​</a></h1><p>在该文档中，我将会记录在与本文档相对应的库的使用中遇到的错误，及其解决方法。</p><h2 id="uncaught-syntaxerror-identifier-h-has-already-been-declared" tabindex="-1">Uncaught SyntaxError: Identifier &#39;h&#39; has already been declared <a class="header-anchor" href="#uncaught-syntaxerror-identifier-h-has-already-been-declared" aria-label="Permalink to &quot;Uncaught SyntaxError: Identifier &#39;h&#39; has already been declared&quot;">​</a></h2><h3 id="报错信息" tabindex="-1">报错信息 <a class="header-anchor" href="#报错信息" aria-label="Permalink to &quot;报错信息&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Uncaught SyntaxError: Identifier &#39;h&#39; has already been declared (at StLoginPage1.vue2.js:6:113)</span></span></code></pre></div><h3 id="错误原因" tabindex="-1">错误原因 <a class="header-anchor" href="#错误原因" aria-label="Permalink to &quot;错误原因&quot;">​</a></h3><p>造成该报错的原因是，因为你之前已经在你的项目中使用 unplugin-auto-import 这个 Vite 插件配置了自动导入项目中使用到的 API，在我的组件库的 StLoginPage1 组件打包生成的代码中 h 变量已经被声明过了，又由于 unplugin-auto-import 这个插件会自动导入 Vue 中 h 函数，导致出现了变量重复声明的错误。</p><h3 id="解决方法" tabindex="-1">解决方法 <a class="header-anchor" href="#解决方法" aria-label="Permalink to &quot;解决方法&quot;">​</a></h3><p>在 unplugin-auto-import 插件的配置中配置忽略 Vue 中的 h 函数即可，让其不要自动导入。</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-WzVgs" id="tab-GiqmW8e" checked><label data-title="vite.config.js | vite.config.ts" for="tab-GiqmW8e">vite.config.js | vite.config.ts</label></div><div class="blocks"><div class="language-js vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark has-diff vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {defineConfig} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vite&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AutoImport </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;unplugin-auto-import/vite&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 自动引入 API 的插件</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// https://vitejs.dev/config/</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  plugins: [</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 自动引入 API 的插件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    AutoImport</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // ...</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 忽略，不需要自动引入的 API</span></span>
<span class="line diff add"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      ignore: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;h&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }),</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ],</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div></div></div>`,10)]))}const g=s(t,[["render",l]]);export{c as __pageData,g as default};
