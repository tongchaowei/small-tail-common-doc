# 此文件中工作流的名称
name: 构建小尾巴通用库文档项目并将构建结果提交到仓库的 gh-pages 分支

# 此工作流的执行时机，即什么时候执行此工作流
# 当向 netlify 分支推送代码时，触发执行此工作流
on:
  push:
    branches:
      - netlify
  # 允许我们在 GitHub 仓库的 Actions 选项卡中手动触发允许此工作流
  workflow_dispatch:

# 设置此工作流对于所在的 GitHub 仓库的操作权限，即允许此工作流对所在的仓库进行哪些操作
# 文档：https://docs.github.com/zh/actions/writing-workflows/workflow-syntax-for-github-actions#permissions
permissions:
  # 允许此工作流读取仓库的源代码和写入
  contents: write

# 只允许同时进行一次部署，跳过正在运行和最新队列之间的运行队列
# 但是，不要取消正在进行的运行，因为我们希望允许这些生产部署完成
concurrency:
  group: pages
  cancel-in-progress: false

# 定义此工作流中的工作任务步骤
jobs:
  # 对项目中的小尾巴通用库文档项目进行打包构建并将构建结果提交到仓库的 gh-pages 分支
  build-and-commit-to-gh-pages:
    # 为作业设置名称
    name: 构建文档项目并将构建结果提交到仓库的 gh-pages 分支
    # 指定此工作任务在什么操作系统环境上运行
    # 操作系统环境中内置的代码运行环境: https://docs.github.com/en/actions/writing-workflows/choosing-where-your-workflow-runs/choosing-the-runner-for-a-job#standard-github-hosted-runners-for-public-repositories
    runs-on: ubuntu-latest
    # 此工作任务的步骤，即指定工作中每一步要做什么
    steps:
      - name: 将代码复制到当前工作任务运行的操作系统环境中
        # 可以理解为使用 GitHub 提供的上已经写好的工作流，将代码复制到当前运行的操作系统环境中
        uses: actions/checkout@v4
      - name: 配置 Node 环境
        # 配置 Node 环境的工作流，为项目构建的配置 Node 环境
        uses: actions/setup-node@v3
        # 向 uses 指令中指定的工作流传递参数
        with:
          node-version: 18
      - name: 配置 GitHub Pages
        # 配置 GitHub Pages 的工作流
        # 该工作流可以用于启用页面并提取有关网站的各种元数据
        uses: actions/configure-pages@v5
        # 由于 GitHub 提供的 ubuntu-latest 操作系统环境中并没有内置 pnpm，因此需要手动安装
      - name: 安装包管理工具 pnpm
        run: npm install -g pnpm
        # 打包构建文档项目
      - name: 构建文档项目
        run: cd ./front-end/monorepo-vite-vue3-ts && pnpm install && pnpm doc:common:build
      - name: 将构建结果上传到 gh-pages 分支
        # 该 action 的作用是可以将代码推送到任何我们想要的分支中，包括 gh-pages 和 docs
        # 注意：该 action 需要 contents: write 权限，并且需要我们将 GITHUB_TOKEN 作为参数传递给该 action
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # 代码上传到的目标分支
          BRANCH: gh-pages
          # 指定需要上传的代码目录
          FOLDER: front-end/monorepo-vite-vue3-ts/docs/small-tail-common-doc/.vitepress/dist
          # 清理之前的就代码文件
          CLEAN: true